# The PEDAC Process #

P - (Understand the) Problem
E - Examples / Test cases
D - Data structure
A - Algorithm
C - Code

# When solving a problem #

1) Read problem description
2) Check test cases (if any)
3) Clarify my understanding or missing parts

A problem contains/can contain:
  - Type of input
  - Type of output
  - Test cases
  - Implicits and explicit requirements

Question to ask myself/interviewer:
  - Clarify unknown/s
  - Test/Edge cases such as:
      - Can the input be anything other than X,Y,Z, invalid input?
      - The exact return value, nil, copy, the object itself?
  - Verify my assumptions!

# Format to digest a problem #

input : ???
output: ???
rules:
    Explicit requirements:
      - A
      - B
      - C
    Implicit requirements:
      - A ?
      - B ?
      -> Make sure to clarify the implicit!

# Data structure/s and Algorithm/s #

- What data structure to use for the problem?
  (Algorithms rely on data structures!)
- What could the algorithm be?

One can start developing an algorithm by solving the problem on a
provided or invented test case.

Using flowcharts and pseudocode, develop a detailed algorithm,
covering everything, from the simple to the hard sub-problems.

From abstract to detailed, casual to formal pseudo-code.
Compartmentalize/modularize problems into smaller chunks, tackle harder
ones on their own, and use sub-processes in the higher level
pseudo-code to keep an overview and check completeness, robustness 
and correctness of the alorithm.

# The whole thing #
- input : ?
- output: ?
- rules:
    - Explicits requirements:
      - ???
    - Implicit requirements:
      - ???
- algorithm
  # general idea / detailed algorithm
    - using high level logic and sub-processes
  # Sub-process A
    - A
    - B
    - ...
  # Sub-process B
    - A
    - B
    - ...
