=begin
  
  Narrative
  ---------
  Greeting to the players.

  The player chooses his name (non-empty) and a marker, and the computer chooses a random name
  and another marker from a list, that is different from tha players.
  The player may also be asked to decide who goes first if configured so.
  Each player starts with a score of zero, and whoever wins 5 rounds first wins the game.

  The players, in turn, choose their square and it is then decided whether the current
  player wins or not. The player who wins a round is granted 1 point, and in case
  of a tie, nobody score.

  Each round will display the winner.
  When someone wins the game, the name will be output and the player will be asked
  to play again.
  
  Goodbye to the players.

  Pseudo
  ------

    - display greeting
    - player choose name and marker
    - computer choose name and marker
    - if config == chose ==> playe choose first player
    - set scores to zero
    - clear and display board
    - game loop until someone has 5 points
      - current player makes choice until valid
      - clear and display board
      - if current player won
        - increment current player score
        - game winner is current player
        - reset for new round
      - if board full
        - reset for new round
    - display winner
    - play again?

  Simplified
  ----------

    display greeting
    init players
    set current player
    init board
  
    forever
      current player makes move
      detect round result
      apply round result
    
    play again?
      

  Nouns and verbs
  ---------------
  
    Nouns: Player(comp, human), name, marker, first, configuration, score, round, game,
           turn, board. max_score
    Verbs: choose(name, marker, first player), choose square, play again, display choice
           display board

    Player:
      X* name
      X* marker
      X* score
      X- choose marker(invalid_markers = [])
      X- choose name
      X- choose cell
      X- reset score
      X- increment score

    Board:
      * markers
      - display
      - unmarked cells
      - full?
      - reset

    Game:
      X* winning score 
      X* 
      * player human
      * player computer
      * current player
      * board
      X- reset

    RoundResult:
      relevant results to act upon:
        - board     full &    winner => round     over + grant point + winner msg
        - board     full & no winner => round     over + no point    + tie    msg
        - board not full &    winner => round     over + grant point + winner msg
        - board not full & no winner => round not over + no point    + no     msg

      Re order
        - board     full &    winner => round     over + grant point + winner msg
        - board not full &    winner => round     over + grant point + winner msg
        - board     full & no winner => round     over + no point    + tie    msg
        - board not full & no winner => round not over + no point    + no     msg

      Factored actions:
        -    winner => grant point & winner msg
        - no winner =>             & board     full => Tie
                                
      * winner      (nil if none)
      * Board full? (bool) => true if board full and no winner
      * Round over? (bool) => true if
      * Game over?  (bool) => true is player reached winning score

    Utils:
      - clear
  
  Requirements
  ------------
      Features
      --------
        - player and computer pick names
        - player and computer pick markers
        - keep score, and 5 wins game
        - ai:
          1. winning move (fill the line)
          2. saving  move (prevent player from winning)
          3. pick square 5 if available
          4. pick random square from available ones
        - first player constant is one of:
          - player   => player   goes first
          - computer => computer goes first
          - choose   => player   chooses who goes first

      Refinements
      -----------
        - joinor for outputting choices:
            joinor([1, 2])          => 1 or 2
            joinor([1, 2, 3])       => 1, 2, or 3
            joinor([1, 2, 3], '; ') => 1; 2; or 3
            joinor([1, 2, 3], ', ', 'and') => 1, 2, and 3
          
          For the output string "Choose a position to place a piece: 1, 2, 3, ..., or 9"
        - loop should look something like:
            loop:
              display board
              place_piece(board, current_player)
              current_player = alternate_player(current_player)
              break if someone_won?(board) || board_full?(board)

 TESTING
 -------

  - selecting player based on config
  - rubocop the thing
  - remove text file

 IMPLEMENT
 ---------

  - select player prompt
  - make private what can be private
  - display output also shows who has which marker

CONTINUE AT
-----------
  
  Player are now properly initialized with names and markers, go from there

=end